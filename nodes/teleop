#!/usr/bin/env python

import time
import pygame
import sys
import roslib;roslib.load_manifest('ranger_ros')
from ranger_ros.ranger import Ranger, PREFIX
from ranger_ros.playwave import playwave, close_audio
from geometry_msgs.msg import Twist
import rospy
import random
import threading

MAX_LINEAR_SPEED = 0.2 # m/s
MAX_ANGULAR_SPEED = 0.4 # rad/s


SOUND_LIBRARY = dict(TOY='0_curious_-_finding_toy.wav', 
                     HAPPY1='1_happy_noise_-_parade-2.wav', 
                     HAPPY2='2_happy_noise_-_parade.wav', 
                     IRRITATED1='3_irritated-discharging-cut.wav', 
                     IRRITATED2='4_irritated_-_obstacle_2.wav', 
                     IRRITATED3='5_irritated_wrong_item.wav', 
                     LOW_ENERGY='6_warning_-_low_energy.wav')


rospy.init_node('ranger_teleop')
twist = rospy.Publisher('/cmd_vel', Twist)
ranger = Ranger()
rospy.loginfo("ROS Ranger interface started")

done = False

def playsound(sound):
    thr = threading.Thread(target=playwave, args=(PREFIX + "sounds/" + SOUND_LIBRARY[sound], ))
    thr.start()

def toy_near():
    ranger.pulse_low_red()
    ranger.eyes(0.2, -0.2)
    ranger.eyebrows(-0.6, 0.6)
    ranger.shake()
    ranger.stop_leds()

def toy_in():

    ranger.leds_level_up()
    if random.random() > 0.5:
        playsound('HAPPY1')
    else:
        playsound('HAPPY2')


def toy_out():

    ranger.leds_level_down()
    playsound('IRRITATED1')


def key_callback(key_unicode):
    global done

    if key_unicode == unicode('\x03'):
        # Ctr + c
        done = True
    elif key_unicode == unicode('\x1b'):
        # ESC -> abort, abort, abort!
        done = True
    elif key_unicode == unicode('\r'):
        # Enter
        pass

v = 0.0
w = 0.0

msg = Twist()

pygame.init()


clock = pygame.time.Clock()



pygame.joystick.init()
joystick_count = pygame.joystick.get_count()

if joystick_count == 0:
    rospy.logerr("Plug your joystick!")
    sys.exit(1)

joystick = pygame.joystick.Joystick(0)
joystick.init()


#### WE ARE READY!
playsound('TOY')

v_prev = 0.0
w_prev = 0.0
eye_prev = 0.0

while not rospy.is_shutdown() and not done:

    event = pygame.event.poll() # User did something


    if event.type == pygame.JOYBUTTONDOWN:
        
        if event.button == 4: # button LR (labeled 5 on joy)
            rospy.loginfo("Motors enabled")
            ranger.enable_motors()

        elif event.button == 8:
            print("Leaving now")
            done = True

        elif event.button == 9:
            ranger.stop_leds()

        elif event.button == 0:
            ranger.sparkle()

        elif event.button == 1:
            ranger.blush()

        elif event.button == 2:
            ranger.pulse_low_green()

        elif event.button == 3:
            toy_near()


    elif event.type == pygame.JOYHATMOTION:
        if event.value[1] == 1: # UP
            toy_in()
        elif event.value[1] == -1: # DOWN
            toy_out()

    elif event.type == pygame.JOYBUTTONUP:
        if event.button == 4: # button LR (labeled 5 on joy)
            rospy.loginfo("Motors disabled")
            ranger.disable_motors()

    elif event.type == pygame.JOYAXISMOTION:

        if event.axis in [0,1]:
            w = -joystick.get_axis( 0 ) * MAX_ANGULAR_SPEED
            v = -joystick.get_axis( 1 ) * MAX_LINEAR_SPEED

        elif event.axis == 2:
            if joystick.get_button(5) and abs(event.value) > 0.01:
                ranger.eyebrows(event.value, event.value)
            elif joystick.get_button(6):
                ranger.raweyes(event.value * 100, event.value * 100)
            else:
                ranger.eyes(event.value, event.value)
        elif event.axis == 3 and abs(event.value) > 0.6:
           if event.value < 0: # up
                ranger.eyes(-0.4, 0.4)
                ranger.eyebrows(-0.6, 0.6)

    elif event.type == pygame.KEYDOWN:
        rospy.logdebug('key down: {0}'.format(event))
        # do work
        key_callback(event.unicode)

    elif event.type == pygame.NOEVENT:
        clock.tick(20) # limit framerate to 20Hz
        ranger.heartbeat()


    ###############

    if w != w_prev or v != v_prev:
        rospy.logdebug("V:%s      W:%s" % (v,w))

        msg.linear.x = v
        msg.angular.z = w
        twist.publish(msg)
        v_prev = v
        w_prev = w


## Quitting...
close_audio()
ranger.stop_leds()
ranger.halt()
pygame.quit ()


